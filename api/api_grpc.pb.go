// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	Run(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*ContainerResponse, error)
	Ps(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ActiveProcesses, error)
	Kill(ctx context.Context, in *KillCommand, opts ...grpc.CallOption) (*ContainerResponse, error)
	Events(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (Api_EventsClient, error)
	RequestStream(ctx context.Context, opts ...grpc.CallOption) (Api_RequestStreamClient, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) Run(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*ContainerResponse, error) {
	out := new(ContainerResponse)
	err := c.cc.Invoke(ctx, "/api.Api/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Ps(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ActiveProcesses, error) {
	out := new(ActiveProcesses)
	err := c.cc.Invoke(ctx, "/api.Api/Ps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Kill(ctx context.Context, in *KillCommand, opts ...grpc.CallOption) (*ContainerResponse, error) {
	out := new(ContainerResponse)
	err := c.cc.Invoke(ctx, "/api.Api/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Events(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (Api_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Api_serviceDesc.Streams[0], "/api.Api/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_EventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type apiEventsClient struct {
	grpc.ClientStream
}

func (x *apiEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) RequestStream(ctx context.Context, opts ...grpc.CallOption) (Api_RequestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Api_serviceDesc.Streams[1], "/api.Api/RequestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiRequestStreamClient{stream}
	return x, nil
}

type Api_RequestStreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type apiRequestStreamClient struct {
	grpc.ClientStream
}

func (x *apiRequestStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiRequestStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	Run(context.Context, *ContainerRequest) (*ContainerResponse, error)
	Ps(context.Context, *Empty) (*ActiveProcesses, error)
	Kill(context.Context, *KillCommand) (*ContainerResponse, error)
	Events(*EventStreamRequest, Api_EventsServer) error
	RequestStream(Api_RequestStreamServer) error
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) Run(context.Context, *ContainerRequest) (*ContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedApiServer) Ps(context.Context, *Empty) (*ActiveProcesses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ps not implemented")
}
func (UnimplementedApiServer) Kill(context.Context, *KillCommand) (*ContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedApiServer) Events(*EventStreamRequest, Api_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedApiServer) RequestStream(Api_RequestStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestStream not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Run(ctx, req.(*ContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Ps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Ps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/Ps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Ps(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Kill(ctx, req.(*KillCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).Events(m, &apiEventsServer{stream})
}

type Api_EventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type apiEventsServer struct {
	grpc.ServerStream
}

func (x *apiEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_RequestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).RequestStream(&apiRequestStreamServer{stream})
}

type Api_RequestStreamServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type apiRequestStreamServer struct {
	grpc.ServerStream
}

func (x *apiRequestStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiRequestStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Api_Run_Handler,
		},
		{
			MethodName: "Ps",
			Handler:    _Api_Ps_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Api_Kill_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _Api_Events_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RequestStream",
			Handler:       _Api_RequestStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
