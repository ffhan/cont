syntax = 'proto3';

package api;

option go_package = "cont/api";

message Packet {
  string id = 1;
  bytes data = 2;
}

message StreamRequest {
  bytes id = 1; // container ID
  bytes clientId = 2; // client ID
}

message StreamResponse {
  string inId = 1; // stream stdin ID
  string outId = 2; // stream stdout ID
  string errId = 3; // stream stderr ID
}

message ShareNSOpts {
  bool share = 1;
  bytes shareID = 2;
}

message ContainerOpts {
  bool interactive = 1;
  ShareNSOpts shareOpts = 2;
}

message ContainerRequest {
  string name = 1;
  string hostname = 2;
  string workdir = 3;
  string cmd = 4;
  repeated string args = 8;
  ContainerOpts opts = 9;
}

message ContainerResponse {
  bytes uuid = 1;
}

message Empty {
}

message Process {
  string id = 1;
  string cmd = 2;
  string name = 3;
  int64 pid = 4;
}

message ActiveProcesses {
  repeated Process processes = 1;
}

message KillCommand {
  bytes id = 1;
}

message EventStreamRequest {
  bytes id = 1;
}

message Event {
  bytes id = 1;
  int32 type = 2;
  string message = 3;
  string source = 4;
  bytes data = 5;
}

service Api {
  rpc Run(ContainerRequest) returns (ContainerResponse);
  rpc Ps(Empty) returns (ActiveProcesses);
  rpc Kill(KillCommand) returns (ContainerResponse);
  rpc Events(EventStreamRequest) returns (stream Event);
  rpc RequestStream(stream StreamRequest) returns (stream StreamResponse);
}
